from dataclasses import dataclass
import gnupg

@dataclass
class Key_inputs:
    
    name_email: str
    passphrase: str
    name_real: str
    key_type: str
    key_length: int
    name_comment: str
    
    def __init__(self, name_email:str, 
                 passphrase:str, 
                 name_real:str='Anonymous',
                 key_type:str='RSA', 
                 key_length:int=2048
                 )->None:
        self.name_email = name_email
        self.passphrase = passphrase
        self.name_real = name_real
        self.key_type = key_type
        self.key_length = key_length   
        self.name_comment = "Generated by GPGtool." 
    
    def __init__(self)->None:
        self.name_email = str(input("[GPGtool][!] Enter your email: "))
        i=0
        while (self.name_email == ""):
            if (i>5):
                raise SystemExit("[GPGtool][!] You have reached the maximum number of attempts.")
            self.name_email = str(input("[GPGtool][!] Enter your email: "))
        
        i=0
        while (self.name_email == ""):
            if (i>3):
                raise SystemExit("[GPGtool][!] You have reached the maximum number of attempts.")
            self.passphrase = str(input("[GPGtool][!] Enter your passphrase: "))
            
        tmp = str(input("[GPGtool][!] Enter your key type (default is RSA): "))
        self.key_type = tmp if tmp else 'RSA'
        tmp = int(input("[GPGtool][!] Enter your key length (default is 2048): "))
        self.key_length = tmp if tmp else 2048
        tmp = str(input("[GPGtool][!] Would you give your key name ? (optional): "))
        self.name_real = tmp if tmp else 'Anonymous'
        self.name_comment = "Generated by GPGtool."


class GPG_engine:
    
    gpg: gnupg.GPG
    key_inputs: Key_inputs
    last_public_key: str
    
    def __init__(self)->None:
        self.gpg = gnupg.GPG(gnupghome = '../keyring/.gnupg')
        self.gpg.encoding = 'utf-8'

    def set_key_input(self, key_inputs:Key_inputs)->str:
        """
        Set the key input for the ondoing key generation.
        Args:
            key_inputs (Key_inputs): A dataclass containing the key inputs.
        """
        
        self.key_inputs = self.gpg.gen_key_input(name_real = key_inputs.name_real,
                                                 name_email = key_inputs.name_email,
                                                 key_type = key_inputs.key_type,
                                                 key_length = key_inputs.key_length,
                                                 name_comment = key_inputs.name_comment,
                                                 passphrase = key_inputs.passphrase
                                                )
    
    def keygen(self, key_inputs:Key_inputs)->None:
        """
        Generate a key pair according to the user's inputs.
        Args:
            key_inputs (Key_inputs): A dataclass containing the key inputs.
        """
        
        if (self.verify_key_inputs(key_inputs)):
            self.set_key_input(key_inputs)
            self.current_public_key = self.gpg.gen_key(self.key_inputs)
    
    
    def encrypt_file(self, path_to_file:str)->None:
        with open(path_to_file, 'rb') as f:
            status = self.gpg.encrypt_file(
                f, 
                recipients = [str(input("[!] Enter recipient's email: "))],
                output = path_to_file + '.enc'
            )
        print(status.ok)
        print(status.stderr)

    def decrypt_file(self, path_to_file:str)->None:
        with open(path_to_file, 'rb') as f:
            status = self.gpg.decrypt_file(
                f,
                passphrase = str(input("[!] Enter your passphrase: ")),
                output = path_to_file + '.dec'
            )
        print(status.ok)
        print(status.stderr)
    
    def verify_key_inputs(self, key_inputs:Key_inputs)->bool:
        """
        Verify if the key inputs are valid.
        Args:
            key_inputs (Key_inputs): A dataclass containing the key inputs.
        Returns:
            bool: True if the key inputs are valid, False otherwise.
        """
        
        if (key_inputs != None):
            for value in key_inputs.__dict__.values():
                if ((value == None) or (value == "")):
                    self.handle_error(2)
                    return False
        elif (key_inputs == None):
            self.handle_error(2)
            return False
        return True
    
    def handle_error(self, error_code:int)->str:
        """
        Create an error according to a error number reported, then crash the app.
        Args:
            error (int): the number of the reported error.
        """
        
        match error_code:
            case 1:
                raise SystemExit("[GPGtool] Crash repport : invalid key inputs '" + self.key_inputs + "' reported.")
            case 0:
                raise SystemExit("[GPGtool] The application has been shot down; from gpg.py.")
            case _:
                raise SystemExit("[GPGtool] Crash report : unknown error reported; in gpg.py.")
    

if __name__ == '__main__':
    gpg = GPG_engine()