import gnupg
from os import path

class GPGtool:
    
    gpg: gnupg.GPG
    keys: dict
    
    def __init__(self):
        self.gpg = gnupg.GPG(gnupghome = path.expanduser('~/.gnupg'))
    
    # Un script qui génère une paire de clés GPG.
    def generate_key(self):
        key_input = self.gpg.gen_key_input(name_real = 'xx',
                                        name_email = 'x@x.x',
                                        key_type = 'RSA',
                                        key_length = 2048,
                                        name_comment = 'Generated by GPGtool',
                                        passphrase = '1234'
                                    )
        self.gpg.gen_key(key_input)
        
    # lister les clés
    def list_keys(self):
        prop = ""
        for char in self.gpg.list_keys().__repr__():
            if (char == ',') :
                print(prop)
                prop = "" 
            else :
                prop += char
                
    # supprimer une clé
    def delete_key(self, key_id):
        self.gpg.delete_keys(key_id)
            
gpg = GPGtool()
gpg.generate_key()
gpg.list_keys()

""" Un exemple de clé dans le keyring gnuPG:
{
    'type': 'pub'
    'trust': 'u'
    'length': '2048'
    'algo': '1'
    'keyid': '4B01A496D9C32959'
    'date': '1727629170'
    'expires': ''
    'dummy': ''
    'ownertrust': 'u'
    'sig': ''
    'cap': 'escarESCA'
    'issuer': ''
    'flag': ''
    'token': ''
    'hash': ''
    'curve': ''
    'compliance': '23'
    'updated': ''
    'origin': '0'
    'keygrip': '447736B9D9031295D5D1E841252AD6610018DD27'
    'uids': ['Alexandre Normand (Generated by GPGtool) <caca@boudin.com>']
    'sigs': []
    'subkeys': []
    'fingerprint': 'E1DF316E94BF5CBEC99AA0294B01A496D9C32959'
} 
"""